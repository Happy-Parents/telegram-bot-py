from telegram import Update, ReplyKeyboardMarkup, Message
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

BOT_TOKEN = "8108504859:AAFwonWfT6VVV2LlOHf4rtE010x9lmpNlGY"
ADMIN_GROUP_ID = -4940266122

user_states = {}  # user_id ‚Üí "active_chat", "awaiting_feedback"
message_to_user_map = {}  # group_msg_id ‚Üí user_id

# üìå –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
WELCOME_MESSAGE = "üëã –í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ *Happy Parents*!\n–û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:"
ASK_MESSAGE = "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ú–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –≤—ñ–¥–ø–æ–≤—ñ–º–æ."
CONFIRM_MESSAGE = "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
THANKS_FEEDBACK_MESSAGE = "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!"
CLOSE_CONVERSATION_MESSAGE = "‚úÖ –î—è–∫—É—î–º–æ! –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
CHOOSE_ACTION_MESSAGE = "üîÑ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start."
FEEDBACK_REQUEST_MESSAGE = "üôè –î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!\n–û—Ü—ñ–Ω—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ä–æ–∑–º–æ–≤—É:"
FEEDBACK_SENT_MESSAGE = "‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
USER_NOT_FOUND_FEEDBACK_MESSAGE = "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏."
ANSWER_SENT_MESSAGE = "üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
USER_NOT_FOUND_ANSWER_MESSAGE = "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

QUESTION_BUTTON_TEXT = "‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"
FEEDBACK_QUESTION = "—Å—Ç–æ–ø"
FEEDBACK_OPTIONS = ["üòê", "üôÇ", "üòÉ"]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[QUESTION_BUTTON_TEXT]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=markup, parse_mode='Markdown')


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = message.text.strip()

    if chat_id == ADMIN_GROUP_ID and message.reply_to_message:
        original_message_id = message.reply_to_message.message_id
        recipient_id = message_to_user_map.get(original_message_id)

        if text == FEEDBACK_QUESTION:
            if recipient_id:
                keyboard = [[emoji] for emoji in FEEDBACK_OPTIONS]
                markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

                await context.bot.send_message(
                    chat_id=recipient_id,
                    text=FEEDBACK_REQUEST_MESSAGE,
                    reply_markup=markup
                )

                user_states[recipient_id] = "awaiting_feedback"
                await message.reply_text(FEEDBACK_SENT_MESSAGE)
            else:
                await message.reply_text(USER_NOT_FOUND_FEEDBACK_MESSAGE)
            return

        if recipient_id:
            await context.bot.send_message(
                chat_id=recipient_id,
                text=f"üí¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}"
            )
            await message.reply_text(ANSWER_SENT_MESSAGE)
        else:
            await message.reply_text(USER_NOT_FOUND_ANSWER_MESSAGE)
        return

    if user_states.get(user_id) == "awaiting_feedback":
        if text in FEEDBACK_OPTIONS:
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á id:{user_id} –æ—Ü—ñ–Ω–∏–≤ —Ä–æ–∑–º–æ–≤—É —è–∫ {text}"
            )
            await message.reply_text(THANKS_FEEDBACK_MESSAGE)
        else:
            await message.reply_text(CLOSE_CONVERSATION_MESSAGE)

        user_states.pop(user_id, None)
        return

    if text == QUESTION_BUTTON_TEXT:
        user_states[user_id] = "active_chat"
        await message.reply_text(ASK_MESSAGE)
        return

    if user_states.get(user_id) == "active_chat":
        username = update.effective_user.username or f"id:{user_id}"
        sent = await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username} ({user_id}):\n\n{text}"
        )
        message_to_user_map[sent.message_id] = user_id
        await message.reply_text(CONFIRM_MESSAGE)
        return

    await message.reply_text(CHOOSE_ACTION_MESSAGE)


def main():
    print("ü§ñ Happy Bot has been launched...")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
